{
    "sourceFile": "vendor/symfony/http-foundation/Response.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1639830555053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1639832073600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -392,9 +392,9 @@\n     {\n         $this->sendHeaders();\n         $this->sendContent();\n \n-C        if (\\function_exists('fastcgi_finish_request')) {\n+        if (\\function_exists('fastcgi_finish_request')) {\n             fastcgi_finish_request();\n         } elseif (!\\in_array(\\PHP_SAPI, ['cli', 'phpdbg'], true)) {\n             static::closeOutputBuffers(0, true);\n         }\n"
                }
            ],
            "date": 1639830555053,
            "name": "Commit-0",
            "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\HttpFoundation;\n\n// Help opcache.preload discover always-needed symbols\nclass_exists(ResponseHeaderBag::class);\n\n/**\n * Response represents an HTTP response.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n */\nclass Response\n{\n    public const HTTP_CONTINUE = 100;\n    public const HTTP_SWITCHING_PROTOCOLS = 101;\n    public const HTTP_PROCESSING = 102;            // RFC2518\n    public const HTTP_EARLY_HINTS = 103;           // RFC8297\n    public const HTTP_OK = 200;\n    public const HTTP_CREATED = 201;\n    public const HTTP_ACCEPTED = 202;\n    public const HTTP_NON_AUTHORITATIVE_INFORMATION = 203;\n    public const HTTP_NO_CONTENT = 204;\n    public const HTTP_RESET_CONTENT = 205;\n    public const HTTP_PARTIAL_CONTENT = 206;\n    public const HTTP_MULTI_STATUS = 207;          // RFC4918\n    public const HTTP_ALREADY_REPORTED = 208;      // RFC5842\n    public const HTTP_IM_USED = 226;               // RFC3229\n    public const HTTP_MULTIPLE_CHOICES = 300;\n    public const HTTP_MOVED_PERMANENTLY = 301;\n    public const HTTP_FOUND = 302;\n    public const HTTP_SEE_OTHER = 303;\n    public const HTTP_NOT_MODIFIED = 304;\n    public const HTTP_USE_PROXY = 305;\n    public const HTTP_RESERVED = 306;\n    public const HTTP_TEMPORARY_REDIRECT = 307;\n    public const HTTP_PERMANENTLY_REDIRECT = 308;  // RFC7238\n    public const HTTP_BAD_REQUEST = 400;\n    public const HTTP_UNAUTHORIZED = 401;\n    public const HTTP_PAYMENT_REQUIRED = 402;\n    public const HTTP_FORBIDDEN = 403;\n    public const HTTP_NOT_FOUND = 404;\n    public const HTTP_METHOD_NOT_ALLOWED = 405;\n    public const HTTP_NOT_ACCEPTABLE = 406;\n    public const HTTP_PROXY_AUTHENTICATION_REQUIRED = 407;\n    public const HTTP_REQUEST_TIMEOUT = 408;\n    public const HTTP_CONFLICT = 409;\n    public const HTTP_GONE = 410;\n    public const HTTP_LENGTH_REQUIRED = 411;\n    public const HTTP_PRECONDITION_FAILED = 412;\n    public const HTTP_REQUEST_ENTITY_TOO_LARGE = 413;\n    public const HTTP_REQUEST_URI_TOO_LONG = 414;\n    public const HTTP_UNSUPPORTED_MEDIA_TYPE = 415;\n    public const HTTP_REQUESTED_RANGE_NOT_SATISFIABLE = 416;\n    public const HTTP_EXPECTATION_FAILED = 417;\n    public const HTTP_I_AM_A_TEAPOT = 418;                                               // RFC2324\n    public const HTTP_MISDIRECTED_REQUEST = 421;                                         // RFC7540\n    public const HTTP_UNPROCESSABLE_ENTITY = 422;                                        // RFC4918\n    public const HTTP_LOCKED = 423;                                                      // RFC4918\n    public const HTTP_FAILED_DEPENDENCY = 424;                                           // RFC4918\n    public const HTTP_TOO_EARLY = 425;                                                   // RFC-ietf-httpbis-replay-04\n    public const HTTP_UPGRADE_REQUIRED = 426;                                            // RFC2817\n    public const HTTP_PRECONDITION_REQUIRED = 428;                                       // RFC6585\n    public const HTTP_TOO_MANY_REQUESTS = 429;                                           // RFC6585\n    public const HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE = 431;                             // RFC6585\n    public const HTTP_UNAVAILABLE_FOR_LEGAL_REASONS = 451;\n    public const HTTP_INTERNAL_SERVER_ERROR = 500;\n    public const HTTP_NOT_IMPLEMENTED = 501;\n    public const HTTP_BAD_GATEWAY = 502;\n    public const HTTP_SERVICE_UNAVAILABLE = 503;\n    public const HTTP_GATEWAY_TIMEOUT = 504;\n    public const HTTP_VERSION_NOT_SUPPORTED = 505;\n    public const HTTP_VARIANT_ALSO_NEGOTIATES_EXPERIMENTAL = 506;                        // RFC2295\n    public const HTTP_INSUFFICIENT_STORAGE = 507;                                        // RFC4918\n    public const HTTP_LOOP_DETECTED = 508;                                               // RFC5842\n    public const HTTP_NOT_EXTENDED = 510;                                                // RFC2774\n    public const HTTP_NETWORK_AUTHENTICATION_REQUIRED = 511;                             // RFC6585\n\n    /**\n     * @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\n     */\n    private const HTTP_RESPONSE_CACHE_CONTROL_DIRECTIVES = [\n        'must_revalidate' => false,\n        'no_cache' => false,\n        'no_store' => false,\n        'no_transform' => false,\n        'public' => false,\n        'private' => false,\n        'proxy_revalidate' => false,\n        'max_age' => true,\n        's_maxage' => true,\n        'immutable' => false,\n        'last_modified' => true,\n        'etag' => true,\n    ];\n\n    /**\n     * @var ResponseHeaderBag\n     */\n    public $headers;\n\n    /**\n     * @var string\n     */\n    protected $content;\n\n    /**\n     * @var string\n     */\n    protected $version;\n\n    /**\n     * @var int\n     */\n    protected $statusCode;\n\n    /**\n     * @var string\n     */\n    protected $statusText;\n\n    /**\n     * @var string\n     */\n    protected $charset;\n\n    /**\n     * Status codes translation table.\n     *\n     * The list of codes is complete according to the\n     * {@link https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml Hypertext Transfer Protocol (HTTP) Status Code Registry}\n     * (last updated 2018-09-21).\n     *\n     * Unless otherwise noted, the status code is defined in RFC2616.\n     *\n     * @var array\n     */\n    public static $statusTexts = [\n        100 => 'Continue',\n        101 => 'Switching Protocols',\n        102 => 'Processing',            // RFC2518\n        103 => 'Early Hints',\n        200 => 'OK',\n        201 => 'Created',\n        202 => 'Accepted',\n        203 => 'Non-Authoritative Information',\n        204 => 'No Content',\n        205 => 'Reset Content',\n        206 => 'Partial Content',\n        207 => 'Multi-Status',          // RFC4918\n        208 => 'Already Reported',      // RFC5842\n        226 => 'IM Used',               // RFC3229\n        300 => 'Multiple Choices',\n        301 => 'Moved Permanently',\n        302 => 'Found',\n        303 => 'See Other',\n        304 => 'Not Modified',\n        305 => 'Use Proxy',\n        307 => 'Temporary Redirect',\n        308 => 'Permanent Redirect',    // RFC7238\n        400 => 'Bad Request',\n        401 => 'Unauthorized',\n        402 => 'Payment Required',\n        403 => 'Forbidden',\n        404 => 'Not Found',\n        405 => 'Method Not Allowed',\n        406 => 'Not Acceptable',\n        407 => 'Proxy Authentication Required',\n        408 => 'Request Timeout',\n        409 => 'Conflict',\n        410 => 'Gone',\n        411 => 'Length Required',\n        412 => 'Precondition Failed',\n        413 => 'Payload Too Large',\n        414 => 'URI Too Long',\n        415 => 'Unsupported Media Type',\n        416 => 'Range Not Satisfiable',\n        417 => 'Expectation Failed',\n        418 => 'I\\'m a teapot',                                               // RFC2324\n        421 => 'Misdirected Request',                                         // RFC7540\n        422 => 'Unprocessable Entity',                                        // RFC4918\n        423 => 'Locked',                                                      // RFC4918\n        424 => 'Failed Dependency',                                           // RFC4918\n        425 => 'Too Early',                                                   // RFC-ietf-httpbis-replay-04\n        426 => 'Upgrade Required',                                            // RFC2817\n        428 => 'Precondition Required',                                       // RFC6585\n        429 => 'Too Many Requests',                                           // RFC6585\n        431 => 'Request Header Fields Too Large',                             // RFC6585\n        451 => 'Unavailable For Legal Reasons',                               // RFC7725\n        500 => 'Internal Server Error',\n        501 => 'Not Implemented',\n        502 => 'Bad Gateway',\n        503 => 'Service Unavailable',\n        504 => 'Gateway Timeout',\n        505 => 'HTTP Version Not Supported',\n        506 => 'Variant Also Negotiates',                                     // RFC2295\n        507 => 'Insufficient Storage',                                        // RFC4918\n        508 => 'Loop Detected',                                               // RFC5842\n        510 => 'Not Extended',                                                // RFC2774\n        511 => 'Network Authentication Required',                             // RFC6585\n    ];\n\n    /**\n     * @throws \\InvalidArgumentException When the HTTP status code is not valid\n     */\n    public function __construct(?string $content = '', int $status = 200, array $headers = [])\n    {\n        $this->headers = new ResponseHeaderBag($headers);\n        $this->setContent($content);\n        $this->setStatusCode($status);\n        $this->setProtocolVersion('1.0');\n    }\n\n    /**\n     * Factory method for chainability.\n     *\n     * Example:\n     *\n     *     return Response::create($body, 200)\n     *         ->setSharedMaxAge(300);\n     *\n     * @return static\n     *\n     * @deprecated since Symfony 5.1, use __construct() instead.\n     */\n    public static function create(?string $content = '', int $status = 200, array $headers = [])\n    {\n        trigger_deprecation('symfony/http-foundation', '5.1', 'The \"%s()\" method is deprecated, use \"new %s()\" instead.', __METHOD__, static::class);\n\n        return new static($content, $status, $headers);\n    }\n\n    /**\n     * Returns the Response as an HTTP string.\n     *\n     * The string representation of the Response is the same as the\n     * one that will be sent to the client only if the prepare() method\n     * has been called before.\n     *\n     * @return string The Response as an HTTP string\n     *\n     * @see prepare()\n     */\n    public function __toString()\n    {\n        return\n            sprintf('HTTP/%s %s %s', $this->version, $this->statusCode, $this->statusText).\"\\r\\n\".\n            $this->headers.\"\\r\\n\".\n            $this->getContent();\n    }\n\n    /**\n     * Clones the current Response instance.\n     */\n    public function __clone()\n    {\n        $this->headers = clone $this->headers;\n    }\n\n    /**\n     * Prepares the Response before it is sent to the client.\n     *\n     * This method tweaks the Response to ensure that it is\n     * compliant with RFC 2616. Most of the changes are based on\n     * the Request that is \"associated\" with this Response.\n     *\n     * @return $this\n     */\n    public function prepare(Request $request)\n    {\n        $headers = $this->headers;\n\n        if ($this->isInformational() || $this->isEmpty()) {\n            $this->setContent(null);\n            $headers->remove('Content-Type');\n            $headers->remove('Content-Length');\n            // prevent PHP from sending the Content-Type header based on default_mimetype\n            ini_set('default_mimetype', '');\n        } else {\n            // Content-type based on the Request\n            if (!$headers->has('Content-Type')) {\n                $format = $request->getRequestFormat(null);\n                if (null !== $format && $mimeType = $request->getMimeType($format)) {\n                    $headers->set('Content-Type', $mimeType);\n                }\n            }\n\n            // Fix Content-Type\n            $charset = $this->charset ?: 'UTF-8';\n            if (!$headers->has('Content-Type')) {\n                $headers->set('Content-Type', 'text/html; charset='.$charset);\n            } elseif (0 === stripos($headers->get('Content-Type'), 'text/') && false === stripos($headers->get('Content-Type'), 'charset')) {\n                // add the charset\n                $headers->set('Content-Type', $headers->get('Content-Type').'; charset='.$charset);\n            }\n\n            // Fix Content-Length\n            if ($headers->has('Transfer-Encoding')) {\n                $headers->remove('Content-Length');\n            }\n\n            if ($request->isMethod('HEAD')) {\n                // cf. RFC2616 14.13\n                $length = $headers->get('Content-Length');\n                $this->setContent(null);\n                if ($length) {\n                    $headers->set('Content-Length', $length);\n                }\n            }\n        }\n\n        // Fix protocol\n        if ('HTTP/1.0' != $request->server->get('SERVER_PROTOCOL')) {\n            $this->setProtocolVersion('1.1');\n        }\n\n        // Check if we need to send extra expire info headers\n        if ('1.0' == $this->getProtocolVersion() && str_contains($headers->get('Cache-Control', ''), 'no-cache')) {\n            $headers->set('pragma', 'no-cache');\n            $headers->set('expires', -1);\n        }\n\n        $this->ensureIEOverSSLCompatibility($request);\n\n        if ($request->isSecure()) {\n            foreach ($headers->getCookies() as $cookie) {\n                $cookie->setSecureDefault(true);\n            }\n        }\n\n        return $this;\n    }\n\n    /**\n     * Sends HTTP headers.\n     *\n     * @return $this\n     */\n    public function sendHeaders()\n    {\n        // headers have already been sent by the developer\n        if (headers_sent()) {\n            return $this;\n        }\n\n        // headers\n        foreach ($this->headers->allPreserveCaseWithoutCookies() as $name => $values) {\n            $replace = 0 === strcasecmp($name, 'Content-Type');\n            foreach ($values as $value) {\n                header($name.': '.$value, $replace, $this->statusCode);\n            }\n        }\n\n        // cookies\n        foreach ($this->headers->getCookies() as $cookie) {\n            header('Set-Cookie: '.$cookie, false, $this->statusCode);\n        }\n\n        // status\n        header(sprintf('HTTP/%s %s %s', $this->version, $this->statusCode, $this->statusText), true, $this->statusCode);\n\n        return $this;\n    }\n\n    /**\n     * Sends content for the current web response.\n     *\n     * @return $this\n     */\n    public function sendContent()\n    {\n        echo $this->content;\n\n        return $this;\n    }\n\n    /**\n     * Sends HTTP headers and content.\n     *\n     * @return $this\n     */\n    public function send()\n    {\n        $this->sendHeaders();\n        $this->sendContent();\n\nC        if (\\function_exists('fastcgi_finish_request')) {\n            fastcgi_finish_request();\n        } elseif (!\\in_array(\\PHP_SAPI, ['cli', 'phpdbg'], true)) {\n            static::closeOutputBuffers(0, true);\n        }\n\n        return $this;\n    }\n\n    /**\n     * Sets the response content.\n     *\n     * @return $this\n     *\n     * @throws \\UnexpectedValueException\n     */\n    public function setContent(?string $content)\n    {\n        $this->content = $content ?? '';\n\n        return $this;\n    }\n\n    /**\n     * Gets the current response content.\n     *\n     * @return string|false\n     */\n    public function getContent()\n    {\n        return $this->content;\n    }\n\n    /**\n     * Sets the HTTP protocol version (1.0 or 1.1).\n     *\n     * @return $this\n     *\n     * @final\n     */\n    public function setProtocolVersion(string $version): object\n    {\n        $this->version = $version;\n\n        return $this;\n    }\n\n    /**\n     * Gets the HTTP protocol version.\n     *\n     * @final\n     */\n    public function getProtocolVersion(): string\n    {\n        return $this->version;\n    }\n\n    /**\n     * Sets the response status code.\n     *\n     * If the status text is null it will be automatically populated for the known\n     * status codes and left empty otherwise.\n     *\n     * @return $this\n     *\n     * @throws \\InvalidArgumentException When the HTTP status code is not valid\n     *\n     * @final\n     */\n    public function setStatusCode(int $code, string $text = null): object\n    {\n        $this->statusCode = $code;\n        if ($this->isInvalid()) {\n            throw new \\InvalidArgumentException(sprintf('The HTTP status code \"%s\" is not valid.', $code));\n        }\n\n        if (null === $text) {\n            $this->statusText = self::$statusTexts[$code] ?? 'unknown status';\n\n            return $this;\n        }\n\n        if (false === $text) {\n            $this->statusText = '';\n\n            return $this;\n        }\n\n        $this->statusText = $text;\n\n        return $this;\n    }\n\n    /**\n     * Retrieves the status code for the current web response.\n     *\n     * @final\n     */\n    public function getStatusCode(): int\n    {\n        return $this->statusCode;\n    }\n\n    /**\n     * Sets the response charset.\n     *\n     * @return $this\n     *\n     * @final\n     */\n    public function setCharset(string $charset): object\n    {\n        $this->charset = $charset;\n\n        return $this;\n    }\n\n    /**\n     * Retrieves the response charset.\n     *\n     * @final\n     */\n    public function getCharset(): ?string\n    {\n        return $this->charset;\n    }\n\n    /**\n     * Returns true if the response may safely be kept in a shared (surrogate) cache.\n     *\n     * Responses marked \"private\" with an explicit Cache-Control directive are\n     * considered uncacheable.\n     *\n     * Responses with neither a freshness lifetime (Expires, max-age) nor cache\n     * validator (Last-Modified, ETag) are considered uncacheable because there is\n     * no way to tell when or how to remove them from the cache.\n     *\n     * Note that RFC 7231 and RFC 7234 possibly allow for a more permissive implementation,\n     * for example \"status codes that are defined as cacheable by default [...]\n     * can be reused by a cache with heuristic expiration unless otherwise indicated\"\n     * (https://tools.ietf.org/html/rfc7231#section-6.1)\n     *\n     * @final\n     */\n    public function isCacheable(): bool\n    {\n        if (!\\in_array($this->statusCode, [200, 203, 300, 301, 302, 404, 410])) {\n            return false;\n        }\n\n        if ($this->headers->hasCacheControlDirective('no-store') || $this->headers->getCacheControlDirective('private')) {\n            return false;\n        }\n\n        return $this->isValidateable() || $this->isFresh();\n    }\n\n    /**\n     * Returns true if the response is \"fresh\".\n     *\n     * Fresh responses may be served from cache without any interaction with the\n     * origin. A response is considered fresh when it includes a Cache-Control/max-age\n     * indicator or Expires header and the calculated age is less than the freshness lifetime.\n     *\n     * @final\n     */\n    public function isFresh(): bool\n    {\n        return $this->getTtl() > 0;\n    }\n\n    /**\n     * Returns true if the response includes headers that can be used to validate\n     * the response with the origin server using a conditional GET request.\n     *\n     * @final\n     */\n    public function isValidateable(): bool\n    {\n        return $this->headers->has('Last-Modified') || $this->headers->has('ETag');\n    }\n\n    /**\n     * Marks the response as \"private\".\n     *\n     * It makes the response ineligible for serving other clients.\n     *\n     * @return $this\n     *\n     * @final\n     */\n    public function setPrivate(): object\n    {\n        $this->headers->removeCacheControlDirective('public');\n        $this->headers->addCacheControlDirective('private');\n\n        return $this;\n    }\n\n    /**\n     * Marks the response as \"public\".\n     *\n     * It makes the response eligible for serving other clients.\n     *\n     * @return $this\n     *\n     * @final\n     */\n    public function setPublic(): object\n    {\n        $this->headers->addCacheControlDirective('public');\n        $this->headers->removeCacheControlDirective('private');\n\n        return $this;\n    }\n\n    /**\n     * Marks the response as \"immutable\".\n     *\n     * @return $this\n     *\n     * @final\n     */\n    public function setImmutable(bool $immutable = true): object\n    {\n        if ($immutable) {\n            $this->headers->addCacheControlDirective('immutable');\n        } else {\n            $this->headers->removeCacheControlDirective('immutable');\n        }\n\n        return $this;\n    }\n\n    /**\n     * Returns true if the response is marked as \"immutable\".\n     *\n     * @final\n     */\n    public function isImmutable(): bool\n    {\n        return $this->headers->hasCacheControlDirective('immutable');\n    }\n\n    /**\n     * Returns true if the response must be revalidated by shared caches once it has become stale.\n     *\n     * This method indicates that the response must not be served stale by a\n     * cache in any circumstance without first revalidating with the origin.\n     * When present, the TTL of the response should not be overridden to be\n     * greater than the value provided by the origin.\n     *\n     * @final\n     */\n    public function mustRevalidate(): bool\n    {\n        return $this->headers->hasCacheControlDirective('must-revalidate') || $this->headers->hasCacheControlDirective('proxy-revalidate');\n    }\n\n    /**\n     * Returns the Date header as a DateTime instance.\n     *\n     * @throws \\RuntimeException When the header is not parseable\n     *\n     * @final\n     */\n    public function getDate(): ?\\DateTimeInterface\n    {\n        return $this->headers->getDate('Date');\n    }\n\n    /**\n     * Sets the Date header.\n     *\n     * @return $this\n     *\n     * @final\n     */\n    public function setDate(\\DateTimeInterface $date): object\n    {\n        if ($date instanceof \\DateTime) {\n            $date = \\DateTimeImmutable::createFromMutable($date);\n        }\n\n        $date = $date->setTimezone(new \\DateTimeZone('UTC'));\n        $this->headers->set('Date', $date->format('D, d M Y H:i:s').' GMT');\n\n        return $this;\n    }\n\n    /**\n     * Returns the age of the response in seconds.\n     *\n     * @final\n     */\n    public function getAge(): int\n    {\n        if (null !== $age = $this->headers->get('Age')) {\n            return (int) $age;\n        }\n\n        return max(time() - (int) $this->getDate()->format('U'), 0);\n    }\n\n    /**\n     * Marks the response stale by setting the Age header to be equal to the maximum age of the response.\n     *\n     * @return $this\n     */\n    public function expire()\n    {\n        if ($this->isFresh()) {\n            $this->headers->set('Age', $this->getMaxAge());\n            $this->headers->remove('Expires');\n        }\n\n        return $this;\n    }\n\n    /**\n     * Returns the value of the Expires header as a DateTime instance.\n     *\n     * @final\n     */\n    public function getExpires(): ?\\DateTimeInterface\n    {\n        try {\n            return $this->headers->getDate('Expires');\n        } catch (\\RuntimeException $e) {\n            // according to RFC 2616 invalid date formats (e.g. \"0\" and \"-1\") must be treated as in the past\n            return \\DateTime::createFromFormat('U', time() - 172800);\n        }\n    }\n\n    /**\n     * Sets the Expires HTTP header with a DateTime instance.\n     *\n     * Passing null as value will remove the header.\n     *\n     * @return $this\n     *\n     * @final\n     */\n    public function setExpires(\\DateTimeInterface $date = null): object\n    {\n        if (null === $date) {\n            $this->headers->remove('Expires');\n\n            return $this;\n        }\n\n        if ($date instanceof \\DateTime) {\n            $date = \\DateTimeImmutable::createFromMutable($date);\n        }\n\n        $date = $date->setTimezone(new \\DateTimeZone('UTC'));\n        $this->headers->set('Expires', $date->format('D, d M Y H:i:s').' GMT');\n\n        return $this;\n    }\n\n    /**\n     * Returns the number of seconds after the time specified in the response's Date\n     * header when the response should no longer be considered fresh.\n     *\n     * First, it checks for a s-maxage directive, then a max-age directive, and then it falls\n     * back on an expires header. It returns null when no maximum age can be established.\n     *\n     * @final\n     */\n    public function getMaxAge(): ?int\n    {\n        if ($this->headers->hasCacheControlDirective('s-maxage')) {\n            return (int) $this->headers->getCacheControlDirective('s-maxage');\n        }\n\n        if ($this->headers->hasCacheControlDirective('max-age')) {\n            return (int) $this->headers->getCacheControlDirective('max-age');\n        }\n\n        if (null !== $this->getExpires()) {\n            return (int) $this->getExpires()->format('U') - (int) $this->getDate()->format('U');\n        }\n\n        return null;\n    }\n\n    /**\n     * Sets the number of seconds after which the response should no longer be considered fresh.\n     *\n     * This methods sets the Cache-Control max-age directive.\n     *\n     * @return $this\n     *\n     * @final\n     */\n    public function setMaxAge(int $value): object\n    {\n        $this->headers->addCacheControlDirective('max-age', $value);\n\n        return $this;\n    }\n\n    /**\n     * Sets the number of seconds after which the response should no longer be considered fresh by shared caches.\n     *\n     * This methods sets the Cache-Control s-maxage directive.\n     *\n     * @return $this\n     *\n     * @final\n     */\n    public function setSharedMaxAge(int $value): object\n    {\n        $this->setPublic();\n        $this->headers->addCacheControlDirective('s-maxage', $value);\n\n        return $this;\n    }\n\n    /**\n     * Returns the response's time-to-live in seconds.\n     *\n     * It returns null when no freshness information is present in the response.\n     *\n     * When the responses TTL is <= 0, the response may not be served from cache without first\n     * revalidating with the origin.\n     *\n     * @final\n     */\n    public function getTtl(): ?int\n    {\n        $maxAge = $this->getMaxAge();\n\n        return null !== $maxAge ? $maxAge - $this->getAge() : null;\n    }\n\n    /**\n     * Sets the response's time-to-live for shared caches in seconds.\n     *\n     * This method adjusts the Cache-Control/s-maxage directive.\n     *\n     * @return $this\n     *\n     * @final\n     */\n    public function setTtl(int $seconds): object\n    {\n        $this->setSharedMaxAge($this->getAge() + $seconds);\n\n        return $this;\n    }\n\n    /**\n     * Sets the response's time-to-live for private/client caches in seconds.\n     *\n     * This method adjusts the Cache-Control/max-age directive.\n     *\n     * @return $this\n     *\n     * @final\n     */\n    public function setClientTtl(int $seconds): object\n    {\n        $this->setMaxAge($this->getAge() + $seconds);\n\n        return $this;\n    }\n\n    /**\n     * Returns the Last-Modified HTTP header as a DateTime instance.\n     *\n     * @throws \\RuntimeException When the HTTP header is not parseable\n     *\n     * @final\n     */\n    public function getLastModified(): ?\\DateTimeInterface\n    {\n        return $this->headers->getDate('Last-Modified');\n    }\n\n    /**\n     * Sets the Last-Modified HTTP header with a DateTime instance.\n     *\n     * Passing null as value will remove the header.\n     *\n     * @return $this\n     *\n     * @final\n     */\n    public function setLastModified(\\DateTimeInterface $date = null): object\n    {\n        if (null === $date) {\n            $this->headers->remove('Last-Modified');\n\n            return $this;\n        }\n\n        if ($date instanceof \\DateTime) {\n            $date = \\DateTimeImmutable::createFromMutable($date);\n        }\n\n        $date = $date->setTimezone(new \\DateTimeZone('UTC'));\n        $this->headers->set('Last-Modified', $date->format('D, d M Y H:i:s').' GMT');\n\n        return $this;\n    }\n\n    /**\n     * Returns the literal value of the ETag HTTP header.\n     *\n     * @final\n     */\n    public function getEtag(): ?string\n    {\n        return $this->headers->get('ETag');\n    }\n\n    /**\n     * Sets the ETag value.\n     *\n     * @param string|null $etag The ETag unique identifier or null to remove the header\n     * @param bool        $weak Whether you want a weak ETag or not\n     *\n     * @return $this\n     *\n     * @final\n     */\n    public function setEtag(string $etag = null, bool $weak = false): object\n    {\n        if (null === $etag) {\n            $this->headers->remove('Etag');\n        } else {\n            if (!str_starts_with($etag, '\"')) {\n                $etag = '\"'.$etag.'\"';\n            }\n\n            $this->headers->set('ETag', (true === $weak ? 'W/' : '').$etag);\n        }\n\n        return $this;\n    }\n\n    /**\n     * Sets the response's cache headers (validation and/or expiration).\n     *\n     * Available options are: must_revalidate, no_cache, no_store, no_transform, public, private, proxy_revalidate, max_age, s_maxage, immutable, last_modified and etag.\n     *\n     * @return $this\n     *\n     * @throws \\InvalidArgumentException\n     *\n     * @final\n     */\n    public function setCache(array $options): object\n    {\n        if ($diff = array_diff(array_keys($options), array_keys(self::HTTP_RESPONSE_CACHE_CONTROL_DIRECTIVES))) {\n            throw new \\InvalidArgumentException(sprintf('Response does not support the following options: \"%s\".', implode('\", \"', $diff)));\n        }\n\n        if (isset($options['etag'])) {\n            $this->setEtag($options['etag']);\n        }\n\n        if (isset($options['last_modified'])) {\n            $this->setLastModified($options['last_modified']);\n        }\n\n        if (isset($options['max_age'])) {\n            $this->setMaxAge($options['max_age']);\n        }\n\n        if (isset($options['s_maxage'])) {\n            $this->setSharedMaxAge($options['s_maxage']);\n        }\n\n        foreach (self::HTTP_RESPONSE_CACHE_CONTROL_DIRECTIVES as $directive => $hasValue) {\n            if (!$hasValue && isset($options[$directive])) {\n                if ($options[$directive]) {\n                    $this->headers->addCacheControlDirective(str_replace('_', '-', $directive));\n                } else {\n                    $this->headers->removeCacheControlDirective(str_replace('_', '-', $directive));\n                }\n            }\n        }\n\n        if (isset($options['public'])) {\n            if ($options['public']) {\n                $this->setPublic();\n            } else {\n                $this->setPrivate();\n            }\n        }\n\n        if (isset($options['private'])) {\n            if ($options['private']) {\n                $this->setPrivate();\n            } else {\n                $this->setPublic();\n            }\n        }\n\n        return $this;\n    }\n\n    /**\n     * Modifies the response so that it conforms to the rules defined for a 304 status code.\n     *\n     * This sets the status, removes the body, and discards any headers\n     * that MUST NOT be included in 304 responses.\n     *\n     * @return $this\n     *\n     * @see https://tools.ietf.org/html/rfc2616#section-10.3.5\n     *\n     * @final\n     */\n    public function setNotModified(): object\n    {\n        $this->setStatusCode(304);\n        $this->setContent(null);\n\n        // remove headers that MUST NOT be included with 304 Not Modified responses\n        foreach (['Allow', 'Content-Encoding', 'Content-Language', 'Content-Length', 'Content-MD5', 'Content-Type', 'Last-Modified'] as $header) {\n            $this->headers->remove($header);\n        }\n\n        return $this;\n    }\n\n    /**\n     * Returns true if the response includes a Vary header.\n     *\n     * @final\n     */\n    public function hasVary(): bool\n    {\n        return null !== $this->headers->get('Vary');\n    }\n\n    /**\n     * Returns an array of header names given in the Vary header.\n     *\n     * @final\n     */\n    public function getVary(): array\n    {\n        if (!$vary = $this->headers->all('Vary')) {\n            return [];\n        }\n\n        $ret = [];\n        foreach ($vary as $item) {\n            $ret = array_merge($ret, preg_split('/[\\s,]+/', $item));\n        }\n\n        return $ret;\n    }\n\n    /**\n     * Sets the Vary header.\n     *\n     * @param string|array $headers\n     * @param bool         $replace Whether to replace the actual value or not (true by default)\n     *\n     * @return $this\n     *\n     * @final\n     */\n    public function setVary($headers, bool $replace = true): object\n    {\n        $this->headers->set('Vary', $headers, $replace);\n\n        return $this;\n    }\n\n    /**\n     * Determines if the Response validators (ETag, Last-Modified) match\n     * a conditional value specified in the Request.\n     *\n     * If the Response is not modified, it sets the status code to 304 and\n     * removes the actual content by calling the setNotModified() method.\n     *\n     * @return bool true if the Response validators match the Request, false otherwise\n     *\n     * @final\n     */\n    public function isNotModified(Request $request): bool\n    {\n        if (!$request->isMethodCacheable()) {\n            return false;\n        }\n\n        $notModified = false;\n        $lastModified = $this->headers->get('Last-Modified');\n        $modifiedSince = $request->headers->get('If-Modified-Since');\n\n        if ($ifNoneMatchEtags = $request->getETags()) {\n            $etag = $this->getEtag();\n            if (0 == strncmp($etag, 'W/', 2)) {\n                $etag = substr($etag, 2);\n            }\n\n            // Use weak comparison as per https://tools.ietf.org/html/rfc7232#section-3.2.\n            foreach ($ifNoneMatchEtags as $ifNoneMatchEtag) {\n                if (0 == strncmp($ifNoneMatchEtag, 'W/', 2)) {\n                    $ifNoneMatchEtag = substr($ifNoneMatchEtag, 2);\n                }\n\n                if ($ifNoneMatchEtag === $etag || '*' === $ifNoneMatchEtag) {\n                    $notModified = true;\n                    break;\n                }\n            }\n        }\n        // Only do If-Modified-Since date comparison when If-None-Match is not present as per https://tools.ietf.org/html/rfc7232#section-3.3.\n        elseif ($modifiedSince && $lastModified) {\n            $notModified = strtotime($modifiedSince) >= strtotime($lastModified);\n        }\n\n        if ($notModified) {\n            $this->setNotModified();\n        }\n\n        return $notModified;\n    }\n\n    /**\n     * Is response invalid?\n     *\n     * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html\n     *\n     * @final\n     */\n    public function isInvalid(): bool\n    {\n        return $this->statusCode < 100 || $this->statusCode >= 600;\n    }\n\n    /**\n     * Is response informative?\n     *\n     * @final\n     */\n    public function isInformational(): bool\n    {\n        return $this->statusCode >= 100 && $this->statusCode < 200;\n    }\n\n    /**\n     * Is response successful?\n     *\n     * @final\n     */\n    public function isSuccessful(): bool\n    {\n        return $this->statusCode >= 200 && $this->statusCode < 300;\n    }\n\n    /**\n     * Is the response a redirect?\n     *\n     * @final\n     */\n    public function isRedirection(): bool\n    {\n        return $this->statusCode >= 300 && $this->statusCode < 400;\n    }\n\n    /**\n     * Is there a client error?\n     *\n     * @final\n     */\n    public function isClientError(): bool\n    {\n        return $this->statusCode >= 400 && $this->statusCode < 500;\n    }\n\n    /**\n     * Was there a server side error?\n     *\n     * @final\n     */\n    public function isServerError(): bool\n    {\n        return $this->statusCode >= 500 && $this->statusCode < 600;\n    }\n\n    /**\n     * Is the response OK?\n     *\n     * @final\n     */\n    public function isOk(): bool\n    {\n        return 200 === $this->statusCode;\n    }\n\n    /**\n     * Is the response forbidden?\n     *\n     * @final\n     */\n    public function isForbidden(): bool\n    {\n        return 403 === $this->statusCode;\n    }\n\n    /**\n     * Is the response a not found error?\n     *\n     * @final\n     */\n    public function isNotFound(): bool\n    {\n        return 404 === $this->statusCode;\n    }\n\n    /**\n     * Is the response a redirect of some form?\n     *\n     * @final\n     */\n    public function isRedirect(string $location = null): bool\n    {\n        return \\in_array($this->statusCode, [201, 301, 302, 303, 307, 308]) && (null === $location ?: $location == $this->headers->get('Location'));\n    }\n\n    /**\n     * Is the response empty?\n     *\n     * @final\n     */\n    public function isEmpty(): bool\n    {\n        return \\in_array($this->statusCode, [204, 304]);\n    }\n\n    /**\n     * Cleans or flushes output buffers up to target level.\n     *\n     * Resulting level can be greater than target level if a non-removable buffer has been encountered.\n     *\n     * @final\n     */\n    public static function closeOutputBuffers(int $targetLevel, bool $flush): void\n    {\n        $status = ob_get_status(true);\n        $level = \\count($status);\n        $flags = \\PHP_OUTPUT_HANDLER_REMOVABLE | ($flush ? \\PHP_OUTPUT_HANDLER_FLUSHABLE : \\PHP_OUTPUT_HANDLER_CLEANABLE);\n\n        while ($level-- > $targetLevel && ($s = $status[$level]) && (!isset($s['del']) ? !isset($s['flags']) || ($s['flags'] & $flags) === $flags : $s['del'])) {\n            if ($flush) {\n                ob_end_flush();\n            } else {\n                ob_end_clean();\n            }\n        }\n    }\n\n    /**\n     * Marks a response as safe according to RFC8674.\n     *\n     * @see https://tools.ietf.org/html/rfc8674\n     */\n    public function setContentSafe(bool $safe = true): void\n    {\n        if ($safe) {\n            $this->headers->set('Preference-Applied', 'safe');\n        } elseif ('safe' === $this->headers->get('Preference-Applied')) {\n            $this->headers->remove('Preference-Applied');\n        }\n\n        $this->setVary('Prefer', false);\n    }\n\n    /**\n     * Checks if we need to remove Cache-Control for SSL encrypted downloads when using IE < 9.\n     *\n     * @see http://support.microsoft.com/kb/323308\n     *\n     * @final\n     */\n    protected function ensureIEOverSSLCompatibility(Request $request): void\n    {\n        if (false !== stripos($this->headers->get('Content-Disposition') ?? '', 'attachment') && 1 == preg_match('/MSIE (.*?);/i', $request->server->get('HTTP_USER_AGENT') ?? '', $match) && true === $request->isSecure()) {\n            if ((int) preg_replace('/(MSIE )(.*?);/', '$2', $match[0]) < 9) {\n                $this->headers->remove('Cache-Control');\n            }\n        }\n    }\n}\n"
        }
    ]
}