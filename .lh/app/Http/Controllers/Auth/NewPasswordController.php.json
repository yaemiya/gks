{
    "sourceFile": "app/Http/Controllers/Auth/NewPasswordController.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1638691797361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1638691814290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,9 @@\n use Illuminate\\Support\\Facades\\Password;\n use Illuminate\\Support\\Str;\n use Illuminate\\Validation\\Rules;\n \n+use App\\Rules\\isLoginFormat;    // 追加\n class NewPasswordController extends Controller\n {\n     /**\n      * Display the password reset view.\n"
                },
                {
                    "date": 1638691819816,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,10 +8,10 @@\n use Illuminate\\Support\\Facades\\Hash;\n use Illuminate\\Support\\Facades\\Password;\n use Illuminate\\Support\\Str;\n use Illuminate\\Validation\\Rules;\n+use App\\Rules\\isLoginFormat;    // 追加\n \n-use App\\Rules\\isLoginFormat;    // 追加\n class NewPasswordController extends Controller\n {\n     /**\n      * Display the password reset view.\n"
                },
                {
                    "date": 1638691894035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n     {\n         $request->validate([\n             'token' => ['required'],\n             'login_id' => ['bail', 'required', 'string', new isLoginFormat,  'between:8,16'],\n-            'password' => ['required', 'confirmed', Rules\\Password::defaults()],\n+            'password' => ['bail', 'required', 'regex:/^[A-Za-z0-9]*$/', 'between:8,16', 'confirmed'],\n         ]);\n \n         // Here we will attempt to reset the user's password. If it is successful we\n         // will update the password on an actual user model and persist it to the\n"
                },
                {
                    "date": 1638692295071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,8 +59,8 @@\n         // the application's home authenticated view. If there is an error we can\n         // redirect them back to where they came from with their error message.\n         return $status == Password::PASSWORD_RESET\n                     ? redirect()->route('login')->with('status', __($status))\n-                    : back()->withInput($request->only(''))\n+                    : back()->withInput($request->only('l'))\n                             ->withErrors(['email' => __($status)]);\n     }\n }\n"
                }
            ],
            "date": 1638691797361,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Http\\Controllers\\Auth;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Auth\\Events\\PasswordReset;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Illuminate\\Support\\Facades\\Password;\nuse Illuminate\\Support\\Str;\nuse Illuminate\\Validation\\Rules;\n\nclass NewPasswordController extends Controller\n{\n    /**\n     * Display the password reset view.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return \\Illuminate\\View\\View\n     */\n    public function create(Request $request)\n    {\n        return view('auth.reset-password', ['request' => $request]);\n    }\n\n    /**\n     * Handle an incoming new password request.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return \\Illuminate\\Http\\RedirectResponse\n     *\n     * @throws \\Illuminate\\Validation\\ValidationException\n     */\n    public function store(Request $request)\n    {\n        $request->validate([\n            'token' => ['required'],\n            'login_id' => ['bail', 'required', 'string', new isLoginFormat,  'between:8,16'],\n            'password' => ['required', 'confirmed', Rules\\Password::defaults()],\n        ]);\n\n        // Here we will attempt to reset the user's password. If it is successful we\n        // will update the password on an actual user model and persist it to the\n        // database. Otherwise we will parse the error and return the response.\n        $status = Password::reset(\n            $request->only('login_id', 'password', 'password_confirmation', 'token'),\n            function ($user) use ($request) {\n                $user->forceFill([\n                    'password' => Hash::make($request->password),\n                    'remember_token' => Str::random(60),\n                ])->save();\n\n                event(new PasswordReset($user));\n            }\n        );\n\n        // If the password was successfully reset, we will redirect the user back to\n        // the application's home authenticated view. If there is an error we can\n        // redirect them back to where they came from with their error message.\n        return $status == Password::PASSWORD_RESET\n                    ? redirect()->route('login')->with('status', __($status))\n                    : back()->withInput($request->only('email'))\n                            ->withErrors(['email' => __($status)]);\n    }\n}\n"
        }
    ]
}